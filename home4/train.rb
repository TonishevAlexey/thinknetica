# Класс Train (Поезд):
#   Имеет номер (произвольная строка) и тип (грузовой, пассажирский) и количество вагонов, эти данные указываются при создании экземпляра класса +
# Может набирать скорость speed()
# Может возвращать текущую скорость speed
# Может тормозить (сбрасывать скорость до нуля) stop
# Может возвращать количество вагонов number_cars
#  Может прицеплять/отцеплять вагоны (по одному вагону за операцию, метод просто увеличивает или уменьшает количество вагонов). Прицепка/отцепка вагонов может осуществляться только если поезд не движется.
#   Может принимать маршрут следования (объект класса Route).
#     При назначении маршрута поезду, поезд автоматически помещается на первую станцию в маршруте.
#   Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
#   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута
class Train
  # Может набирать скорость speed(),Может возвращать текущую скорость speed
  attr_accessor :speed;
  attr_reader :number_cars, :number;
  #   Имеет номер (произвольная строка) и тип (грузовой, пассажирский) и количество вагонов, эти данные указываются при создании экземпляра класса
  def initialize(number)
    @number = number
    @number_cars = []
    @speed = 0
    @route
    @current_station_index = 0
  end

  # Исправлено, Может тормозить (сбрасывать скорость до нуля) stop
  def stop
    self.speed(0)
  end

  #При добавлении маршрута поезд должен добавляться на станцию отправления , прописана в условиях задания,Может принимать маршрут следования (объект класса Route).
  def assign_route(route)
    @route = route
    @route.station_now.add_trains(self)
  end

  #   Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
  #Следующая станция , прописана в условиях задания, run_trains это движение поезда по маршруту , т.е удаление с предведущей станции и добавление на новой
  def go_next
    if @current_station_index < ((@route.route_size) - 1)
      @route.station_now.run_trains(@route.station_next, self)
      @current_station_index += 1
      @route.train_position = @current_station_index
    else
      puts "Вы на последней станции."
    end
  end

  #   Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
  def go_back
    if @current_station_index > 0
      @route.station_now.run_trains(@route.station_last, self)
      @current_station_index -= 1
      @route.train_position = @current_station_index
    else
      puts "Вы на первой станции."
    end
  end

  #   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута , прописана в условиях задания
  def station_last
    @route.station_last
  end

  #   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута , прописана в условиях задания
  def station_next
    @route.station_next
  end

  #   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута , прописана в условиях задания
  def station_now
    @route.station_now
  end

end