# Класс Train (Поезд):
#   Имеет номер (произвольная строка) и тип (грузовой, пассажирский) и количество вагонов, эти данные указываются при создании экземпляра класса +
# Может набирать скорость speed()
# Может возвращать текущую скорость speed
# Может тормозить (сбрасывать скорость до нуля) stop
# Может возвращать количество вагонов number_cars
#  Может прицеплять/отцеплять вагоны (по одному вагону за операцию, метод просто увеличивает или уменьшает количество вагонов). Прицепка/отцепка вагонов может осуществляться только если поезд не движется.
#   Может принимать маршрут следования (объект класса Route).
#     При назначении маршрута поезду, поезд автоматически помещается на первую станцию в маршруте.
#   Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
#   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута
class Train
  # Может набирать скорость speed(),Может возвращать текущую скорость speed
  attr_accessor :speed;
  attr_reader :number_cars;
  #   Имеет номер (произвольная строка) и тип (грузовой, пассажирский) и количество вагонов, эти данные указываются при создании экземпляра класса
  def initialize(number, type, number_cars)
    @number = number
    @type = type
    @number_cars = number_cars
    @speed = 0
    @route
    @current_station_index = 0
  end

  # Исправлено, Может тормозить (сбрасывать скорость до нуля) stop
  def stop
    self.speed(0)
  end

  #  Может прицеплять/отцеплять вагоны (по одному вагону за операцию, метод просто увеличивает или уменьшает количество вагонов). Прицепка/отцепка вагонов может осуществляться только если поезд не движется.

  def add_car
    @number_cars += 1 if self.speed == 0
  end

  #  Может прицеплять/отцеплять вагоны (по одному вагону за операцию, метод просто увеличивает или уменьшает количество вагонов). Прицепка/отцепка вагонов может осуществляться только если поезд не движется.

  def delete_car
    @number_cars -= 1 if self.speed == 0 && @number_cars > 1
  end

  #При добавлении маршрута поезд должен добавляться на станцию отправления , прописана в условиях задания,Может принимать маршрут следования (объект класса Route).
  def assign_route(route)
    @route = route
    @route[@current_station_index].add_trains(self)
  end

  #   Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
  #Следующая станция , прописана в условиях задания, run_trains это движение поезда по маршруту , т.е удаление с предведущей станции и добавление на новой
  def go_next
    if @current_station_index < (@route.size -1)
      @route[@current_station_index].run_trains(@route[0 + 1], self)
      @current_station_index += 1
    else
      puts "Вы на последней станции."
    end
  end

  #   Может перемещаться между станциями, указанными в маршруте. Перемещение возможно вперед и назад, но только на 1 станцию за раз.
  def go_back
    if @current_station_index > 0
      @route[@current_station_index].run_trains(@route[0 - 1], self)
      @current_station_index -= 1
    else
      puts "Вы на первой станции."
    end
  end

  #   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута , прописана в условиях задания
  def station_last
    @route[@current_station_index - 1] if @current_station_index - 1 >= 0
    "Вы на первой станции."
  end

  #   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута , прописана в условиях задания
  def station_next
    @route[@current_station_index + 1] if @current_station_index + 1 <= (@route.size - 1)
    "Вы на последней станции."
  end

  #   Возвращать предыдущую станцию, текущую, следующую, на основе маршрута , прописана в условиях задания
  def station_now
    @route[@current_station_index]
  end

end